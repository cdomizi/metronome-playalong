{"version":3,"sources":["../src/getImgPaths.ts","../src/showNoteImg.ts","../src/changeNote.ts","../src/metronome.ts","../src/main.ts"],"sourcesContent":["const notes = [\n  \"e2\",\n  \"f2\",\n  \"g2\",\n  \"a2\",\n  \"b2\",\n  \"c3\",\n  \"d3\",\n  \"e3\",\n  \"f3\",\n  \"g3\",\n  \"a3\",\n  \"b3\",\n  \"c4\",\n];\n\nexport function getRandomSvgPath() {\n  const randomIndex = Math.floor(Math.random() * notes.length);\n  const randomNote = notes[randomIndex];\n\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  const randomSvgPath = `./static/images/${randomNote}.svg`;\n\n  return randomSvgPath;\n}\n","/* eslint-disable @typescript-eslint/non-nullable-type-assertion-style */\nconst noteImgElement = document.querySelector(\"img#note\") as HTMLImageElement;\n\nexport function showNoteImg(url: string) {\n  // Display the SVG image\n  noteImgElement.setAttribute(\"src\", url);\n}\n","import { getRandomSvgPath } from \"./getImgPaths.js\";\nimport { showNoteImg } from \"./showNoteImg.js\";\n\n// eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style\nconst staffContainer = document.querySelector(\n  \"#staff-container\",\n) as HTMLElement;\n\nexport function changeNote() {\n  // Get path of random SVG file\n  const randomSvg = getRandomSvgPath();\n\n  // Handle error on getting SVG file path\n  if (!randomSvg) {\n    console.error(`Error: Could not get SVG file.`);\n    staffContainer.textContent =\n      \"An error occurred: Cannot display a new note.\";\n\n    return;\n  }\n\n  showNoteImg(randomSvg);\n}\n","import { changeNote } from \"./changeNote.js\";\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\nexport async function startMetronome(\n  interval: number,\n  beatsPerMeasure: number,\n) {\n  // Load the audio files\n  const highSound = await loadAudio(\"./static/audio/metronome-high.mp3\");\n  const lowSound = await loadAudio(\"./static/audio/metronome-low.mp3\");\n\n  let beatCount = 0;\n\n  // Function to play the sound\n  function playBeat() {\n    if (beatCount % beatsPerMeasure === 0) {\n      // Play high sound on the first beat\n      highSound.currentTime = 0; // Reset to start\n      highSound.play();\n      // Change the note on the first beat\n      changeNote();\n    } else {\n      // Play low sound on the following beats\n      lowSound.currentTime = 0; // Reset to start\n      lowSound.play();\n    }\n\n    beatCount++;\n    if (beatCount >= beatsPerMeasure) {\n      beatCount = 0; // Reset beat count after one measure\n    }\n  }\n\n  return setInterval(playBeat, interval);\n}\n\n// Load audio file\nfunction loadAudio(url: string): Promise<HTMLAudioElement> {\n  return new Promise((resolve, reject) => {\n    const audio = new Audio(url);\n\n    audio.addEventListener(\n      \"canplaythrough\",\n      () => {\n        resolve(audio);\n      },\n      false,\n    );\n    audio.addEventListener(\n      \"error\",\n      () => {\n        reject(new Error(\"Failed to load audio: \" + url));\n      },\n      false,\n    );\n\n    audio.load(); // Start loading the audio\n  });\n}\n","/* eslint-disable @typescript-eslint/non-nullable-type-assertion-style */\nimport { startMetronome } from \"./metronome.js\";\nimport { showNoteImg } from \"./showNoteImg.js\";\n\n// Start with empty staff\nconst epmtyStaffURL = \"./static/images/empty-staff.svg\";\nshowNoteImg(epmtyStaffURL);\n\n// Toggle button utils\nfunction toggleDisableButton(disabled: boolean, button: HTMLButtonElement) {\n  button.disabled = disabled;\n}\nfunction toggleButtonUp(\n  maxValue: number,\n  currentValue: number,\n  button: HTMLButtonElement,\n  isIncrement?: boolean,\n) {\n  const disabled = (isIncrement ?? true) && currentValue >= maxValue - 1;\n  toggleDisableButton(disabled, button);\n}\nfunction toggleButtonDown(\n  minValue: number,\n  currentValue: number,\n  button: HTMLButtonElement,\n  isDecrement?: boolean,\n) {\n  const disabled = (isDecrement ?? true) && currentValue <= minValue + 1;\n  toggleDisableButton(disabled, button);\n}\n\n/* ======== Tempo ======== */\nconst TEMPO_CONFIG = {\n  defaultTempo: 90,\n  minBpm: 1,\n  maxBpm: 360,\n};\nlet bpm = TEMPO_CONFIG.defaultTempo;\nconst bpmValue = document.querySelector(\"#tempo-value\") as HTMLSpanElement;\n\n// Convert BPM to ms\nfunction bpmToMs(bpm: number) {\n  return (60 * 1000) / bpm;\n}\nlet ms = bpmToMs(bpm);\n\nconst tempoSlider = document.querySelector(\"#tempo-slider\") as HTMLInputElement;\n\ntempoSlider.value = bpm.toString(); // Set default value\nbpmValue.textContent = tempoSlider.value; // Show default value in UI\n\nfunction updateTempoSliderValue(newTempoValue: string) {\n  tempoSlider.value = newTempoValue; // Update slider value\n  bpmValue.textContent = tempoSlider.value; // Update BPM value in UI\n\n  bpm = parseInt(newTempoValue); // Update BPM value\n  ms = bpmToMs(bpm); // Update ms value\n\n  // Notify metronome that the tempo has changed\n  const tempoChangeEvent = new Event(\"tempoChange\");\n  // Only dispatch the event if the metronome is playing\n  if (isMetronomePlaying) metronomeToggleButton.dispatchEvent(tempoChangeEvent);\n}\n\nfunction handleTempoSliderChange(event: Event) {\n  const newTempoValue = (event.target as HTMLInputElement).value;\n\n  updateTempoSliderValue(newTempoValue);\n}\n\n// Change BPM based on slider\ntempoSlider.addEventListener(\"change\", handleTempoSliderChange);\n\nconst tempoButtonUp = document.querySelector(\n  \"#tempo-button-up\",\n) as HTMLButtonElement;\nconst tempoButtonDown = document.querySelector(\n  \"#tempo-button-down\",\n) as HTMLButtonElement;\n\n// Change the value in the slider on button press\ntoggleButtonUp(TEMPO_CONFIG.maxBpm, bpm, tempoButtonUp);\ntoggleButtonDown(TEMPO_CONFIG.minBpm, bpm, tempoButtonDown);\n\n// Increment or decrement beats per measure via button\nfunction handleTempoButtonChange(event: Event) {\n  const isIncrement =\n    (event.target as HTMLButtonElement).id === \"tempo-button-up\" ||\n    (event.target as HTMLButtonElement).id === \"tempo-button-up-icon\";\n\n  // Enable/disable buttons based on current value + change\n  toggleButtonUp(TEMPO_CONFIG.maxBpm, bpm, tempoButtonUp, isIncrement);\n  toggleButtonDown(TEMPO_CONFIG.minBpm, bpm, tempoButtonDown, !isIncrement);\n\n  // Update the value in the slider by dispatching change event\n  const tempoSliderEventType = isIncrement ? \"increment\" : \"decrement\";\n  const tempoChangeEvent = new Event(tempoSliderEventType);\n  tempoSlider.dispatchEvent(tempoChangeEvent);\n}\n\n// Adjust BPM via UI\ntempoButtonUp.addEventListener(\"click\", handleTempoButtonChange);\ntempoButtonDown.addEventListener(\"click\", handleTempoButtonChange);\n\nfunction handleTempoSliderButtonChange(event: Event) {\n  event.stopPropagation();\n\n  const isIncrement = event.type === \"increment\";\n\n  // Calculate new value from current value\n  const currentTempoValue = parseInt(tempoSlider.value);\n  // Increment/decrement current value based on button press +/-\n  const newTempoValue = isIncrement\n    ? currentTempoValue + 1\n    : currentTempoValue - 1;\n\n  updateTempoSliderValue(newTempoValue.toString());\n}\n\n// Change slider on button click\ntempoSlider.addEventListener(\"increment\", handleTempoSliderButtonChange);\ntempoSlider.addEventListener(\"decrement\", handleTempoSliderButtonChange);\n\n/* ======== Time Signature ======== */\nconst TIME_SIGNATURE_CONFIG = {\n  defaultBeatsPerMeasure: 4,\n  minBeatsPerMeasure: 1,\n  maxBeatsPerMeasure: 4,\n};\nlet beatsPerMeasure = TIME_SIGNATURE_CONFIG.defaultBeatsPerMeasure;\nconst beatsPerMeasureValue = document.querySelector(\n  \"#time-signature-value\",\n) as HTMLSpanElement;\nbeatsPerMeasureValue.textContent = beatsPerMeasure.toString();\n\nconst timeSignatureButtonUp = document.querySelector(\n  \"#time-signature-button-up\",\n) as HTMLButtonElement;\nconst timeSignatureButtonDown = document.querySelector(\n  \"#time-signature-button-down\",\n) as HTMLButtonElement;\n\n// Disable/enable buttons based on config + current values\ntoggleButtonUp(\n  TIME_SIGNATURE_CONFIG.maxBeatsPerMeasure,\n  beatsPerMeasure,\n  timeSignatureButtonUp,\n);\ntoggleButtonDown(\n  TIME_SIGNATURE_CONFIG.minBeatsPerMeasure,\n  beatsPerMeasure,\n  timeSignatureButtonDown,\n);\n\n// Increment or decrement beats per measure via button\nfunction handleTimeSignatureButtonChange(event: Event) {\n  event.stopPropagation();\n\n  const isIncrement =\n    (event.target as HTMLButtonElement).id === \"time-signature-button-up\";\n\n  // Enable/disable buttons based on current value + change\n  toggleButtonUp(\n    TIME_SIGNATURE_CONFIG.maxBeatsPerMeasure,\n    beatsPerMeasure,\n    timeSignatureButtonUp,\n    isIncrement,\n  );\n  toggleButtonDown(\n    TIME_SIGNATURE_CONFIG.minBeatsPerMeasure,\n    beatsPerMeasure,\n    timeSignatureButtonDown,\n    !isIncrement,\n  );\n\n  // Set the new value\n  beatsPerMeasure = isIncrement ? ++beatsPerMeasure : --beatsPerMeasure;\n\n  // Update value in UI\n  beatsPerMeasureValue.textContent = beatsPerMeasure.toString();\n\n  // Notify metronome that the time signature has changed\n  const timeSignatureChangeEvent = new Event(\"timeSignatureChange\");\n  // Only dispatch the event if the metronome is playing\n  if (isMetronomePlaying)\n    metronomeToggleButton.dispatchEvent(timeSignatureChangeEvent);\n}\n\n// Adjust BPM via UI\ntimeSignatureButtonUp.addEventListener(\n  \"click\",\n  handleTimeSignatureButtonChange,\n);\ntimeSignatureButtonDown.addEventListener(\n  \"click\",\n  handleTimeSignatureButtonChange,\n);\n\n/* ======== Metronome ======== */\nlet isMetronomePlaying: number | null;\n\nconst metronomeToggleButton = document.querySelector(\n  \"#metronome-toggle-button\",\n) as HTMLButtonElement;\n\nconst staffContainer = document.querySelector(\n  \"#staff-container\",\n) as HTMLDivElement;\n\n// Start/stop metronome on button click\nmetronomeToggleButton.addEventListener(\"click\", async () => {\n  const metronomePlayButton = document.querySelector(\n    \"#metronome-button-play-icon\",\n  ) as SVGElement;\n  const metronomePauseButton = document.querySelector(\n    \"#metronome-button-pause-icon\",\n  ) as SVGElement;\n\n  if (isMetronomePlaying) {\n    // Metronome playing\n    clearInterval(isMetronomePlaying);\n    isMetronomePlaying = null;\n    // Change button icon from ⏸️ to ▶️\n    metronomePlayButton.setAttribute(\"class\", \"\");\n    metronomePauseButton.setAttribute(\"class\", \"hidden\");\n  } else {\n    //Metronome not playing\n    isMetronomePlaying = await startMetronome(ms, beatsPerMeasure);\n    // Change button icon from ▶️ to ⏸️\n    metronomePlayButton.setAttribute(\"class\", \"hidden\");\n    metronomePauseButton.setAttribute(\"class\", \"\");\n\n    // Scroll to staff\n    staffContainer.scrollIntoView();\n  }\n});\n\nasync function restartMetronome() {\n  if (isMetronomePlaying) {\n    // Stop the metronome\n    clearInterval(isMetronomePlaying);\n    isMetronomePlaying = null;\n\n    // Restart the metronome with the updated value for beatsPerMeasure\n    isMetronomePlaying = await startMetronome(ms, beatsPerMeasure);\n  }\n}\n\n// Restart the metronome on tempo change\nmetronomeToggleButton.addEventListener(\"tempoChange\", restartMetronome);\n// Restart the metronome on time signature change\nmetronomeToggleButton.addEventListener(\"timeSignatureChange\", restartMetronome);\n"],"mappings":"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","names":["notes","getRandomSvgPath","randomIndex","noteImgElement","showNoteImg","url","staffContainer","changeNote","randomSvg","getRandomSvgPath","showNoteImg","startMetronome","interval","beatsPerMeasure","highSound","loadAudio","lowSound","beatCount","playBeat","changeNote","url","resolve","reject","audio","epmtyStaffURL","showNoteImg","toggleDisableButton","disabled","button","toggleButtonUp","maxValue","currentValue","isIncrement","toggleButtonDown","minValue","isDecrement","TEMPO_CONFIG","bpm","bpmValue","bpmToMs","ms","tempoSlider","updateTempoSliderValue","newTempoValue","tempoChangeEvent","isMetronomePlaying","metronomeToggleButton","handleTempoSliderChange","event","tempoButtonUp","tempoButtonDown","handleTempoButtonChange","tempoSliderEventType","handleTempoSliderButtonChange","currentTempoValue","TIME_SIGNATURE_CONFIG","beatsPerMeasure","beatsPerMeasureValue","timeSignatureButtonUp","timeSignatureButtonDown","handleTimeSignatureButtonChange","timeSignatureChangeEvent","staffContainer","metronomePlayButton","metronomePauseButton","startMetronome","restartMetronome"]}