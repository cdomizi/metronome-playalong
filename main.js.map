{"version":3,"sources":["../src/getImgPaths.ts","../src/showNoteImg.ts","../src/changeNote.ts","../src/metronome.ts","../src/main.ts"],"names":["getImgPaths","body","links","link","getRandomSvgPath","svgPaths","randomIndex","noteImgElement","showNoteImg","url","staffContainer","changeNote","randomSvg","startMetronome","interval","beatsPerMeasure","highSound","loadAudio","lowSound","beatCount","playBeat","resolve","reject","audio","epmtyStaffURL","toggleDisableButton","disabled","button","toggleButtonUp","maxValue","currentValue","isIncrement","toggleButtonDown","minValue","isDecrement","TEMPO_CONFIG","bpm","bpmValue","bpmToMs","ms","tempoSlider","updateTempoSliderValue","newTempoValue","tempoChangeEvent","isMetronomePlaying","metronomeToggleButton","handleTempoSliderChange","event","tempoButtonUp","tempoButtonDown","handleTempoButtonChange","tempoSliderEventType","handleTempoSliderButtonChange","currentTempoValue","TIME_SIGNATURE_CONFIG","beatsPerMeasureValue","timeSignatureButtonUp","timeSignatureButtonDown","handleTimeSignatureButtonChange","timeSignatureChangeEvent","metronomePlayButton","metronomePauseButton","restartMetronome"],"mappings":"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","file":"main.js","sourcesContent":["async function getImgPaths() {\n  // Get content from the `images folder`\n  const response = await fetch(\"./static/images\");\n  const body = await response.text();\n\n  // Parse content as HTML\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(body, \"text/html\");\n  // SVG files are displayed as anchor elements\n  const links = doc.querySelectorAll(\"a\");\n  if (!links.length) {\n    throw Error(\"Document does not contain SVG element\");\n  }\n  // Filter out non-SVG files and empty staff\n  const svgPaths = Array.from(links)\n    .map((link) => link.href)\n    .filter(\n      (link) => link.endsWith(\".svg\") && !link.toLowerCase().includes(\"staff\"),\n    );\n\n  return svgPaths;\n}\n\nexport async function getRandomSvgPath() {\n  const svgPaths = await getImgPaths();\n  const randomIndex = Math.floor(Math.random() * svgPaths.length);\n\n  return svgPaths[randomIndex];\n}\n","/* eslint-disable @typescript-eslint/non-nullable-type-assertion-style */\nconst noteImgElement = document.querySelector(\"img#note\") as HTMLImageElement;\n\nexport function showNoteImg(url: string) {\n  // Display the SVG image\n  noteImgElement.setAttribute(\"src\", url);\n}\n","import { getRandomSvgPath } from \"./getImgPaths.js\";\nimport { showNoteImg } from \"./showNoteImg.js\";\n\n// eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style\nconst staffContainer = document.querySelector(\n  \"#staff-container\",\n) as HTMLElement;\n\nexport async function changeNote() {\n  // Get path of random SVG file\n  const randomSvg = await getRandomSvgPath();\n\n  // Handle error on getting SVG file path\n  if (!randomSvg) {\n    console.error(`Error: Could not get SVG file.`);\n    staffContainer.textContent =\n      \"An error occurred: Cannot display a new note.\";\n\n    return;\n  }\n\n  showNoteImg(randomSvg);\n}\n","import { changeNote } from \"./changeNote.js\";\n\n/* eslint-disable @typescript-eslint/no-floating-promises */\nexport async function startMetronome(\n  interval: number,\n  beatsPerMeasure: number,\n) {\n  // Load the audio files\n  const highSound = await loadAudio(\"../static/audio/metronome-high.mp3\");\n  const lowSound = await loadAudio(\"../static/audio/metronome-low.mp3\");\n\n  let beatCount = 0;\n\n  // Function to play the sound\n  function playBeat() {\n    if (beatCount % beatsPerMeasure === 0) {\n      // Play high sound on the first beat\n      highSound.currentTime = 0; // Reset to start\n      highSound.play();\n      // Change the note on the first beat\n      changeNote();\n    } else {\n      // Play low sound on the following beats\n      lowSound.currentTime = 0; // Reset to start\n      lowSound.play();\n    }\n\n    beatCount++;\n    if (beatCount >= beatsPerMeasure) {\n      beatCount = 0; // Reset beat count after one measure\n    }\n  }\n\n  return setInterval(playBeat, interval);\n}\n\n// Load audio file\nfunction loadAudio(url: string): Promise<HTMLAudioElement> {\n  return new Promise((resolve, reject) => {\n    const audio = new Audio(url);\n\n    audio.addEventListener(\n      \"canplaythrough\",\n      () => {\n        resolve(audio);\n      },\n      false,\n    );\n    audio.addEventListener(\n      \"error\",\n      () => {\n        reject(new Error(\"Failed to load audio: \" + url));\n      },\n      false,\n    );\n\n    audio.load(); // Start loading the audio\n  });\n}\n","/* eslint-disable @typescript-eslint/non-nullable-type-assertion-style */\nimport { startMetronome } from \"./metronome.js\";\nimport { showNoteImg } from \"./showNoteImg.js\";\n\n// Start with empty staff\nconst epmtyStaffURL = \"./static/images/empty-staff.svg\";\nshowNoteImg(epmtyStaffURL);\n\n// Toggle button utils\nfunction toggleDisableButton(disabled: boolean, button: HTMLButtonElement) {\n  button.disabled = disabled;\n}\nfunction toggleButtonUp(\n  maxValue: number,\n  currentValue: number,\n  button: HTMLButtonElement,\n  isIncrement?: boolean,\n) {\n  const disabled = (isIncrement ?? true) && currentValue >= maxValue - 1;\n  toggleDisableButton(disabled, button);\n}\nfunction toggleButtonDown(\n  minValue: number,\n  currentValue: number,\n  button: HTMLButtonElement,\n  isDecrement?: boolean,\n) {\n  const disabled = (isDecrement ?? true) && currentValue <= minValue + 1;\n  toggleDisableButton(disabled, button);\n}\n\n/* ======== Tempo ======== */\nconst TEMPO_CONFIG = {\n  defaultTempo: 90,\n  minBpm: 1,\n  maxBpm: 360,\n};\nlet bpm = TEMPO_CONFIG.defaultTempo;\nconst bpmValue = document.querySelector(\"#tempo-value\") as HTMLSpanElement;\n\n// Convert BPM to ms\nfunction bpmToMs(bpm: number) {\n  return (60 * 1000) / bpm;\n}\nlet ms = bpmToMs(bpm);\n\nconst tempoSlider = document.querySelector(\"#tempo-slider\") as HTMLInputElement;\n\ntempoSlider.value = bpm.toString(); // Set default value\nbpmValue.textContent = tempoSlider.value; // Show default value in UI\n\nfunction updateTempoSliderValue(newTempoValue: string) {\n  tempoSlider.value = newTempoValue; // Update slider value\n  bpmValue.textContent = tempoSlider.value; // Update BPM value in UI\n\n  bpm = parseInt(newTempoValue); // Update BPM value\n  ms = bpmToMs(bpm); // Update ms value\n\n  // Notify metronome that the tempo has changed\n  const tempoChangeEvent = new Event(\"tempoChange\");\n  // Only dispatch the event if the metronome is playing\n  if (isMetronomePlaying) metronomeToggleButton.dispatchEvent(tempoChangeEvent);\n}\n\nfunction handleTempoSliderChange(event: Event) {\n  const newTempoValue = (event.target as HTMLInputElement).value;\n\n  updateTempoSliderValue(newTempoValue);\n}\n\n// Change BPM based on slider\ntempoSlider.addEventListener(\"change\", handleTempoSliderChange);\n\nconst tempoButtonUp = document.querySelector(\n  \"#tempo-button-up\",\n) as HTMLButtonElement;\nconst tempoButtonDown = document.querySelector(\n  \"#tempo-button-down\",\n) as HTMLButtonElement;\n\n// Change the value in the slider on button press\ntoggleButtonUp(TEMPO_CONFIG.maxBpm, bpm, tempoButtonUp);\ntoggleButtonDown(TEMPO_CONFIG.minBpm, bpm, tempoButtonDown);\n\n// Increment or decrement beats per measure via button\nfunction handleTempoButtonChange(event: Event) {\n  const isIncrement =\n    (event.target as HTMLButtonElement).id === \"tempo-button-up\" ||\n    (event.target as HTMLButtonElement).id === \"tempo-button-up-icon\";\n\n  // Enable/disable buttons based on current value + change\n  toggleButtonUp(TEMPO_CONFIG.maxBpm, bpm, tempoButtonUp, isIncrement);\n  toggleButtonDown(TEMPO_CONFIG.minBpm, bpm, tempoButtonDown, !isIncrement);\n\n  // Update the value in the slider by dispatching change event\n  const tempoSliderEventType = isIncrement ? \"increment\" : \"decrement\";\n  const tempoChangeEvent = new Event(tempoSliderEventType);\n  tempoSlider.dispatchEvent(tempoChangeEvent);\n}\n\n// Adjust BPM via UI\ntempoButtonUp.addEventListener(\"click\", handleTempoButtonChange);\ntempoButtonDown.addEventListener(\"click\", handleTempoButtonChange);\n\nfunction handleTempoSliderButtonChange(event: Event) {\n  event.stopPropagation();\n\n  const isIncrement = event.type === \"increment\";\n\n  // Calculate new value from current value\n  const currentTempoValue = parseInt(tempoSlider.value);\n  // Increment/decrement current value based on button press +/-\n  const newTempoValue = isIncrement\n    ? currentTempoValue + 1\n    : currentTempoValue - 1;\n\n  updateTempoSliderValue(newTempoValue.toString());\n}\n\n// Change slider on button click\ntempoSlider.addEventListener(\"increment\", handleTempoSliderButtonChange);\ntempoSlider.addEventListener(\"decrement\", handleTempoSliderButtonChange);\n\n/* ======== Time Signature ======== */\nconst TIME_SIGNATURE_CONFIG = {\n  defaultBeatsPerMeasure: 4,\n  minBeatsPerMeasure: 1,\n  maxBeatsPerMeasure: 4,\n};\nlet beatsPerMeasure = TIME_SIGNATURE_CONFIG.defaultBeatsPerMeasure;\nconst beatsPerMeasureValue = document.querySelector(\n  \"#time-signature-value\",\n) as HTMLSpanElement;\nbeatsPerMeasureValue.textContent = beatsPerMeasure.toString();\n\nconst timeSignatureButtonUp = document.querySelector(\n  \"#time-signature-button-up\",\n) as HTMLButtonElement;\nconst timeSignatureButtonDown = document.querySelector(\n  \"#time-signature-button-down\",\n) as HTMLButtonElement;\n\n// Disable/enable buttons based on config + current values\ntoggleButtonUp(\n  TIME_SIGNATURE_CONFIG.maxBeatsPerMeasure,\n  beatsPerMeasure,\n  timeSignatureButtonUp,\n);\ntoggleButtonDown(\n  TIME_SIGNATURE_CONFIG.minBeatsPerMeasure,\n  beatsPerMeasure,\n  timeSignatureButtonDown,\n);\n\n// Increment or decrement beats per measure via button\nfunction handleTimeSignatureButtonChange(event: Event) {\n  event.stopPropagation();\n\n  const isIncrement =\n    (event.target as HTMLButtonElement).id === \"time-signature-button-up\";\n\n  // Enable/disable buttons based on current value + change\n  toggleButtonUp(\n    TIME_SIGNATURE_CONFIG.maxBeatsPerMeasure,\n    beatsPerMeasure,\n    timeSignatureButtonUp,\n    isIncrement,\n  );\n  toggleButtonDown(\n    TIME_SIGNATURE_CONFIG.minBeatsPerMeasure,\n    beatsPerMeasure,\n    timeSignatureButtonDown,\n    !isIncrement,\n  );\n\n  // Set the new value\n  beatsPerMeasure = isIncrement ? ++beatsPerMeasure : --beatsPerMeasure;\n\n  // Update value in UI\n  beatsPerMeasureValue.textContent = beatsPerMeasure.toString();\n\n  // Notify metronome that the time signature has changed\n  const timeSignatureChangeEvent = new Event(\"timeSignatureChange\");\n  // Only dispatch the event if the metronome is playing\n  if (isMetronomePlaying)\n    metronomeToggleButton.dispatchEvent(timeSignatureChangeEvent);\n}\n\n// Adjust BPM via UI\ntimeSignatureButtonUp.addEventListener(\n  \"click\",\n  handleTimeSignatureButtonChange,\n);\ntimeSignatureButtonDown.addEventListener(\n  \"click\",\n  handleTimeSignatureButtonChange,\n);\n\n/* ======== Metronome ======== */\nlet isMetronomePlaying: number | null;\n\nconst metronomeToggleButton = document.querySelector(\n  \"#metronome-toggle-button\",\n) as HTMLButtonElement;\n\nconst staffContainer = document.querySelector(\n  \"staff-container\",\n) as HTMLDivElement;\n\n// Start/stop metronome on button click\nmetronomeToggleButton.addEventListener(\"click\", async () => {\n  const metronomePlayButton = document.querySelector(\n    \"#metronome-button-play-icon\",\n  ) as SVGElement;\n  const metronomePauseButton = document.querySelector(\n    \"#metronome-button-pause-icon\",\n  ) as SVGElement;\n\n  if (isMetronomePlaying) {\n    // Metronome playing\n    clearInterval(isMetronomePlaying);\n    isMetronomePlaying = null;\n    // Change button icon from ⏸️ to ▶️\n    metronomePlayButton.setAttribute(\"class\", \"\");\n    metronomePauseButton.setAttribute(\"class\", \"hidden\");\n  } else {\n    //Metronome not playing\n    isMetronomePlaying = await startMetronome(ms, beatsPerMeasure);\n    // Change button icon from ▶️ to ⏸️\n    metronomePlayButton.setAttribute(\"class\", \"hidden\");\n    metronomePauseButton.setAttribute(\"class\", \"\");\n\n    // Scroll to staff\n    staffContainer.scrollIntoView();\n  }\n});\n\nasync function restartMetronome() {\n  if (isMetronomePlaying) {\n    // Stop the metronome\n    clearInterval(isMetronomePlaying);\n    isMetronomePlaying = null;\n\n    // Restart the metronome with the updated value for beatsPerMeasure\n    isMetronomePlaying = await startMetronome(ms, beatsPerMeasure);\n\n    // Scroll to staff\n    staffContainer.scrollIntoView();\n  }\n}\n\n// Restart the metronome on tempo change\nmetronomeToggleButton.addEventListener(\"tempoChange\", restartMetronome);\n// Restart the metronome on time signature change\nmetronomeToggleButton.addEventListener(\"timeSignatureChange\", restartMetronome);\n"]}